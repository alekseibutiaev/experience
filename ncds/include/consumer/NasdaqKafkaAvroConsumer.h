#pragma once

#include <memory>
#include <string>
#include <unordered_map>

#include <spdlog/spdlog.h>

#include <avro/ValidSchema.hh>

#include <librdkafka/rdkafkacpp.h>
#include <librdkafka/rdkafka.h>

#include <internal/utils/Oauth.h>
#include <internal/ReadSchemaTopic.h>

/**
 * \defgroup consumer consumer
 * Contains the NasdaqKafkaAvroConsumer class for deserializing consumed messages from a topic.
 * @{
 */
/**
 * @brief Nasdaq Kafka Avro Consumer
 * This class creates a Kafka consumer for Avro messages. Creates a consumer from
   the schema generated by the config arguments.
 */
class NasdaqKafkaAvroConsumer
{
private:
    ReadSchemaTopic read_schema_topic;
    RdKafka::Conf* kafka_conf;
    std::unique_ptr<NCDSOAuthBearerTokenRefreshCb> token_cb;
    std::unique_ptr<RdKafka::Conf> test_conf;
    std::shared_ptr<spdlog::logger> logger;

    static void logger_cb (const rd_kafka_t *rk, int level, const char *fac, const char *buf);

public:
    NasdaqKafkaAvroConsumer();
    std::string client_id;
    /**
     * Initializes security_cfg and kafka_cfg, and sets the variables for client_ID,
        security_props, kafka_props, and read_schema_topic
     */
    NasdaqKafkaAvroConsumer(RdKafka::Conf * kafka_cfg, std::unordered_map<std::string, std::string> &security_cfg);
    /**
     * Returns all topics.
     * @return all topics available to the user
     */
    std::set<std::string> get_topics();
    /**
     * Retrieves the schema for the given topic.
     * @param topic: Schema topic name
     * @return an avro ValidSchema object
     */
    avro::ValidSchema get_schema(const std::string &topic);
    /**
     * @param topic_name: Kafka message series topic name
     * @return the Kafka consumer
     */
    std::unique_ptr<RdKafka::KafkaConsumer> get_kafka_consumer(const std::string &topic_name);
    /**
     * @param topic_name: Kafka message series topic name
     * @param timestamp: timestamp in milliseconds since the UNIX epoch
     * @return the Kafka consumer after seeking to the given timestamp
     */
    std::unique_ptr<RdKafka::KafkaConsumer> get_kafka_consumer(const std::string &topic_name, long timestamp);
    /**
     * This method returns the Kafka consumer.
     * @param stream_name: the name of the topic to subscribe to
     * @return a Kafka Consumer subscribed to the given stream name
     */
    std::unique_ptr<RdKafka::KafkaConsumer> get_consumer(const std::string &stream_name);
};


/**@}*/
