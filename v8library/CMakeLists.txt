cmake_minimum_required(VERSION 3.5)

option(OPTION_ENABLE_GDB_JIT_INTERFACE "enable gdb git interface" OFF)
option(OPTION_V8_EMBEDDED_BUILTINS "enable v8 embedded builtins" ON)
option(OPTION_V8_USE_SNAPSHOT "enable use snapshot" ON)
option(OPTION_V8_SNAPSHOT_NATIVE_CODE_COUNTERS "enable snapshot native code counters" ON)

if( NOT CMAKE_BUILD_TYPE )
  set( CMAKE_BUILD_TYPE Release ... FORCE )
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
  message("Compiler is: Clang")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  message("Compiler is: GCC:")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
  message("Compiler is: Intel C++")
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
  message("Compiler is: Visual Studio C++")
endif()

set(CMAKE_CXX_FLAGS_DEBUG "-O0 -g3")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -g0 -DNDEBUG")

set(solution_dir ${CMAKE_CURRENT_SOURCE_DIR})
set(v8source ${solution_dir}/sources)
list(APPEND CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake/Modules/")

set(CXX_FLAGS_COMMON "-Wall -Werror -std=gnu++14 -Wno-deprecated-declarations")

if(CMAKE_BUILD_TYPE MATCHES Debug)
  message("Debug build.")
elseif(CMAKE_BUILD_TYPE MATCHES Release)
  message("Release build.")
  set(CXX_FLAGS_COMMON ${CXX_FLAGS_COMMON} -DNDEBUG)
else()
  message("Some other build type.")
endif()

execute_process(COMMAND uname -m COMMAND tr -d '\n' OUTPUT_VARIABLE ARCHITECTURE)
execute_process(COMMAND uname -o COMMAND tr -d '\n' OUTPUT_VARIABLE OS)

message(STATUS "source dir: " ${CMAKE_SOURCE_DIR})
message(STATUS "CMAKE_MODULE_PATH: " ${CMAKE_MODULE_PATH})
message(STATUS "CMAKE_BINARY_DIR: " ${CMAKE_BINARY_DIR})
message(STATUS "v8source: " ${v8source})
message(STATUS "CMAKE_SYSTEM_NAME: " ${CMAKE_SYSTEM_NAME})
message(STATUS "Architecture: ${ARCHITECTURE}")
message(STATUS "OS: ${OS}")

if(CMAKE_VERSION VERSION_LESS 3.12.0)
  find_package(PythonInterp 3 REQUIRED)
  set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})
else()
  find_package(Python3 COMPONENTS Interpreter REQUIRED)
  set(PYTHON_EXECUTABLE ${Python3_EXECUTABLE})
endif()

message("PYTHON_EXECUTABLE :" ${PYTHON_EXECUTABLE}) 

find_package(ICU 64.0 COMPONENTS i18n uc REQUIRED)
if(ICU_FOUND)
    message("ICU_FOUND: " ${ICU_FOUND})
    message("ICU_VERSION: " ${ICU_VERSION})
    message("ICU_INCLUDE_DIRS: " ${ICU_INCLUDE_DIRS})
    message("ICU_LIBRARIES: " ${ICU_LIBRARIES})
else()
    message (FATAL_ERROR "Cannot find ICU")
    message (FATAL_ERROR "for install read this https://kifarunix.com/how-to-install-php-7-3-3-on-ubuntu-18-04/")
    message (FATAL_ERROR "apt-get install libicu-dev")
endif()

if(OPTION_ENABLE_GDB_JIT_INTERFACE)
  add_definitions(-DENABLE_GDB_JIT_INTERFACE)
endif(OPTION_ENABLE_GDB_JIT_INTERFACE)


if(OPTION_V8_EMBEDDED_BUILTINS)
  add_definitions(-DV8_EMBEDDED_BUILTINS)
  message("OPTION_V8_EMBEDDED_BUILTINS ON")
else(OPTION_V8_EMBEDDED_BUILTINS)
  message("OPTION_V8_EMBEDDED_BUILTINS OFF")
endif(OPTION_V8_EMBEDDED_BUILTINS)

if(OPTION_V8_USE_SNAPSHOT)
  add_definitions(-DV8_EMBEDDED_BUILTINS)
  if(OPTION_V8_SNAPSHOT_NATIVE_CODE_COUNTERS)
    add_definitions(-DV8_SNAPSHOT_NATIVE_CODE_COUNTERS)
  endif(OPTION_V8_SNAPSHOT_NATIVE_CODE_COUNTERS)
endif(OPTION_V8_USE_SNAPSHOT)

if(0)
    set (GTEST_ROOT /usr/src/googletest/googlemock)
    find_package(GTest REQUIRED)
    if(GTEST_FOUND)
        message("GTEST_INCLUDE_DIRS: " ${GTEST_INCLUDE_DIRS})
        message("GTEST_LIBRARIES: " ${GTEST_LIBRARIES})
        message("GTEST_MAIN_LIBRARIES: " ${GTEST_MAIN_LIBRARIES})
        message("GTEST_BOTH_LIBRARIES: " ${GTEST_BOTH_LIBRARIES})
    else()
        message (FATAL_ERROR "Cannot find GTest")
        message (FATAL_ERROR "sudo apt-get install googletest")
    endif()
endif()

add_subdirectory(v8build)

