START:    equ 0
ICONS:   equ 0x3d00
SCREEN:   equ 0x4000
SCREEN_SIZE:   equ 0x800*3
ATTR:   equ 0x5800
ATTR_SIZE:   equ 0x100*3
BLACK_ON_WHITE: equ 0x38
COL_COUNT: equ 32
COL_COUNT_MASK: equ COL_COUNT - 1
ROWCOUNT: equ 24
SYMBOLCOUNT: equ 96
ZX128_PORT: equ 0x7FFD
WINDOW_ADDRESS: equ 0xc000
BANK_COUNT: equ 0x8

org START
  di
  ld sp, 0x8000
  ld a, BLACK_ON_WHITE
  call clear_screen

  xor a;

  ld hl, text
  ld de, 0x0010
  call print_string
;;  jp loop

  nop
  nop
  nop
  nop
  nop

  ld bc, ZX128_PORT
  ld ix, WINDOW_ADDRESS
  ld h, 0
win_test_write:
  ld a, h
  call bank_value
  out (c), a
  ld (ix + 10), h
  inc h
  ld a, h
  cp BANK_COUNT
  jr c, win_test_write

  nop
  nop
  nop
  nop
  nop
;;  jp loop
  ld h, 0
win_test_read:
  ld a, h
  call bank_value
  out (c), a
  ld a, (ix + 10)
  push hl
  push hl
  pop de
  cp h
  jr z, win_test_read_ok
  ld hl, err_msg
  jr win_test_read_print
win_test_read_ok:
  ld hl, ok_msg
win_test_read_print:
  call print_msg
  pop hl
  inc h
  ld a, h
  cp BANK_COUNT 
  jr c, win_test_read

loop:
  nop
  jr loop
  jp START


bank_value:
  push de
  ld d, a
  and 0x07
  ld e, a
  ld a, d
  and 0x38
  sla a
  sla a
  or e
  pop de
  ret 

  nop
  nop
  nop
  nop

print_msg:
  push af
  ld a, d
  and 0x7
  ld e, a
  ld a, d
  srl a
  srl a
  srl a
  and 0x07
  ld d, a
  call print_string
  pop af
  ret

;; print null terminated string routine
;; HL null terminated string
;; DE pisition X,Y
print_string:
  push af
print_string_1:
  ld a,(hl)
  or a
  jr nz, print_string_2
  pop af
  ret
print_string_2:
  sub 0x20
  call print_symbol
  inc d
  inc hl
  jr print_string_1

;; print symbol routine
;; A symbol
;; DE pisition X,Y
print_symbol:
  push hl
  push de
  push bc
  push ix
  push iy

  call pos_address
  push hl
  pop iy                     ;; iy has position address

  ld hl, ICONS
  call icon_addr
  push hl
  pop ix                     ;; ix has icon address

  ld de, 0x0100
  ld b, 8
print_symbol_3:
  ld a,(ix+0)
  ld (iy+0),a
  inc ix
  add iy, de
  djnz print_symbol_3

  pop iy
  pop ix
  pop bc
  pop de
  pop hl
  ret

;; calculate icon for symbol
;; A symbol
;; HL base address
;; result
;; HL addres of icon
icon_addr:
  push bc
  ld c, a
  ld b, 0
  or a
  rl c
  rl b
  rl c
  rl b
  rl c
  rl b
  add hl, bc
  pop bc
  ret

;; calculate address for position
;; DE position X, Y
;; result
;; HL addres of first row
pos_address:
  push af
  push bc
  push de
  ld h, 0
  ld a, e
pos_address_0:
  cp ROWCOUNT
  jr c, pos_address_1
  sub ROWCOUNT
  jr pos_address_0
pos_address_1:
  ld l, a
  ld h, 0
  or a
  ld b, 5
pos_address_2:
  rl l
  rl h
  djnz pos_address_2
  ld b, 3
pos_address_3:
  rl h
  djnz pos_address_3
  ld a, d
  and COL_COUNT_MASK
  or l
  ld l, a
  ld de, SCREEN
  add hl, de
  pop de
  pop bc
  pop af
  ret

;; Clear screen routine
;; A color attribute
clear_screen:
  push hl
  push bc
  push de
  ld hl, SCREEN
  ld bc, SCREEN_SIZE
  ld e, 0;
  call fell_memory
  ld hl, ATTR
  ld bc, ATTR_SIZE
  ld e, a;
  call fell_memory
  pop de
  pop bc
  pop hl
  ret

;; fill memory routine
;; HL address for fill
;; BC count
;; E byte for fill
fell_memory:
  push af
fell_memory_1:
  ld (hl), e;
  inc hl
  dec bc
  ld a,c
  or b
  jr nz, fell_memory_1
  pop af
  ret



text:
defb 'test ram page.', 0x00

ok_msg:
defb 'o', 0x00

err_msg:
defb 'e', 0x00

end:
defs ICONS-end, 0xff
org ICONS
defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x10, 0x10, 0x10, 0x00, 0x10, 0x00
defb 0x00, 0x24, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x7e, 0x24, 0x24, 0x7e, 0x24, 0x00
defb 0x00, 0x08, 0x3e, 0x28, 0x3e, 0x0a, 0x3e, 0x08, 0x00, 0x62, 0x64, 0x08, 0x10, 0x26, 0x46, 0x00
defb 0x00, 0x10, 0x28, 0x10, 0x2a, 0x44, 0x3a, 0x00, 0x00, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00
defb 0x00, 0x04, 0x08, 0x08, 0x08, 0x08, 0x04, 0x00, 0x00, 0x20, 0x10, 0x10, 0x10, 0x10, 0x20, 0x00
defb 0x00, 0x00, 0x14, 0x08, 0x3e, 0x08, 0x14, 0x00, 0x00, 0x00, 0x08, 0x08, 0x3e, 0x08, 0x08, 0x00
defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00
defb 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x00, 0x02, 0x04, 0x08, 0x10, 0x20, 0x00
defb 0x00, 0x3c, 0x46, 0x4a, 0x52, 0x62, 0x3c, 0x00, 0x00, 0x18, 0x28, 0x08, 0x08, 0x08, 0x3e, 0x00
defb 0x00, 0x3c, 0x42, 0x02, 0x3c, 0x40, 0x7e, 0x00, 0x00, 0x3c, 0x42, 0x0c, 0x02, 0x42, 0x3c, 0x00
defb 0x00, 0x08, 0x18, 0x28, 0x48, 0x7e, 0x08, 0x00, 0x00, 0x7e, 0x40, 0x7c, 0x02, 0x42, 0x3c, 0x00
defb 0x00, 0x3c, 0x40, 0x7c, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x7e, 0x02, 0x04, 0x08, 0x10, 0x10, 0x00
defb 0x00, 0x3c, 0x42, 0x3c, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x3e, 0x02, 0x3c, 0x00
defb 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x10, 0x20
defb 0x00, 0x00, 0x04, 0x08, 0x10, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x3e, 0x00, 0x00
defb 0x00, 0x00, 0x10, 0x08, 0x04, 0x08, 0x10, 0x00, 0x00, 0x3c, 0x42, 0x04, 0x08, 0x00, 0x08, 0x00
defb 0x00, 0x3c, 0x4a, 0x56, 0x5e, 0x40, 0x3c, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x00
defb 0x00, 0x7c, 0x42, 0x7c, 0x42, 0x42, 0x7c, 0x00, 0x00, 0x3c, 0x42, 0x40, 0x40, 0x42, 0x3c, 0x00
defb 0x00, 0x78, 0x44, 0x42, 0x42, 0x44, 0x78, 0x00, 0x00, 0x7e, 0x40, 0x7c, 0x40, 0x40, 0x7e, 0x00
defb 0x00, 0x7e, 0x40, 0x7c, 0x40, 0x40, 0x40, 0x00, 0x00, 0x3c, 0x42, 0x40, 0x4e, 0x42, 0x3c, 0x00
defb 0x00, 0x42, 0x42, 0x7e, 0x42, 0x42, 0x42, 0x00, 0x00, 0x3e, 0x08, 0x08, 0x08, 0x08, 0x3e, 0x00
defb 0x00, 0x02, 0x02, 0x02, 0x42, 0x42, 0x3c, 0x00, 0x00, 0x44, 0x48, 0x70, 0x48, 0x44, 0x42, 0x00
defb 0x00, 0x40, 0x40, 0x40, 0x40, 0x40, 0x7e, 0x00, 0x00, 0x42, 0x66, 0x5a, 0x42, 0x42, 0x42, 0x00
defb 0x00, 0x42, 0x62, 0x52, 0x4a, 0x46, 0x42, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x00
defb 0x00, 0x7c, 0x42, 0x42, 0x7c, 0x40, 0x40, 0x00, 0x00, 0x3c, 0x42, 0x42, 0x52, 0x4a, 0x3c, 0x00
defb 0x00, 0x7c, 0x42, 0x42, 0x7c, 0x44, 0x42, 0x00, 0x00, 0x3c, 0x40, 0x3c, 0x02, 0x42, 0x3c, 0x00
defb 0x00, 0xfe, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x42, 0x3c, 0x00
defb 0x00, 0x42, 0x42, 0x42, 0x42, 0x24, 0x18, 0x00, 0x00, 0x42, 0x42, 0x42, 0x42, 0x5a, 0x24, 0x00
defb 0x00, 0x42, 0x24, 0x18, 0x18, 0x24, 0x42, 0x00, 0x00, 0x82, 0x44, 0x28, 0x10, 0x10, 0x10, 0x00
defb 0x00, 0x7e, 0x04, 0x08, 0x10, 0x20, 0x7e, 0x00, 0x00, 0x0e, 0x08, 0x08, 0x08, 0x08, 0x0e, 0x00
defb 0x00, 0x00, 0x40, 0x20, 0x10, 0x08, 0x04, 0x00, 0x00, 0x70, 0x10, 0x10, 0x10, 0x10, 0x70, 0x00
defb 0x00, 0x10, 0x38, 0x54, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff
defb 0x00, 0x1c, 0x22, 0x78, 0x20, 0x20, 0x7e, 0x00, 0x00, 0x00, 0x38, 0x04, 0x3c, 0x44, 0x3c, 0x00
defb 0x00, 0x20, 0x20, 0x3c, 0x22, 0x22, 0x3c, 0x00, 0x00, 0x00, 0x1c, 0x20, 0x20, 0x20, 0x1c, 0x00
defb 0x00, 0x04, 0x04, 0x3c, 0x44, 0x44, 0x3c, 0x00, 0x00, 0x00, 0x38, 0x44, 0x78, 0x40, 0x3c, 0x00
defb 0x00, 0x0c, 0x10, 0x18, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x3c, 0x44, 0x44, 0x3c, 0x04, 0x38
defb 0x00, 0x40, 0x40, 0x78, 0x44, 0x44, 0x44, 0x00, 0x00, 0x10, 0x00, 0x30, 0x10, 0x10, 0x38, 0x00
defb 0x00, 0x04, 0x00, 0x04, 0x04, 0x04, 0x24, 0x18, 0x00, 0x20, 0x28, 0x30, 0x30, 0x28, 0x24, 0x00
defb 0x00, 0x10, 0x10, 0x10, 0x10, 0x10, 0x0c, 0x00, 0x00, 0x00, 0x68, 0x54, 0x54, 0x54, 0x54, 0x00
defb 0x00, 0x00, 0x78, 0x44, 0x44, 0x44, 0x44, 0x00, 0x00, 0x00, 0x38, 0x44, 0x44, 0x44, 0x38, 0x00
defb 0x00, 0x00, 0x78, 0x44, 0x44, 0x78, 0x40, 0x40, 0x00, 0x00, 0x3c, 0x44, 0x44, 0x3c, 0x04, 0x06
defb 0x00, 0x00, 0x1c, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x38, 0x40, 0x38, 0x04, 0x78, 0x00
defb 0x00, 0x10, 0x38, 0x10, 0x10, 0x10, 0x0c, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x38, 0x00
defb 0x00, 0x00, 0x44, 0x44, 0x28, 0x28, 0x10, 0x00, 0x00, 0x00, 0x44, 0x54, 0x54, 0x54, 0x28, 0x00
defb 0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00, 0x00, 0x00, 0x44, 0x44, 0x44, 0x3c, 0x04, 0x38
defb 0x00, 0x00, 0x7c, 0x08, 0x10, 0x20, 0x7c, 0x00, 0x00, 0x0e, 0x08, 0x30, 0x08, 0x08, 0x0e, 0x00
defb 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, 0x70, 0x10, 0x0c, 0x10, 0x10, 0x70, 0x00
defb 0x00, 0x14, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x42, 0x99, 0xa1, 0xa1, 0x99, 0x42, 0x3c

